import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ЁЯФС Config
BOT_TOKEN = "7978191312:AAFyWVkBruuR42HTuTd_sQxFaKHBrre0VWw"
ADMIN_ID = 7459795138
REQUIRED_CHANNEL = "boomupbot10"   # рдЖрдкрдХрд╛ group/channel username (рдмрд┐рдирд╛ @ рдХреЗ)
WEBAPP_URL = "https://studiokbyt.onrender.com"

# рд▓реЙрдЧрд┐рдВрдЧ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    try:
        member = await context.bot.get_chat_member("@" + REQUIRED_CHANNEL, user.id)

        if member.status in ["member", "administrator", "creator"]:
            # тЬЕ User already joined
            keyboard = [[InlineKeyboardButton("ЁЯМР WebApp рдЦреЛрд▓реЗрдВ", web_app=WebAppInfo(url=WEBAPP_URL))]]
            await update.message.reply_text(
                "тЬЕ рдЖрдкрдиреЗ Join рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ!\nрдЕрдм WebApp рдЦреЛрд▓реЗрдВ ЁЯСЗ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # тЭМ Not joined
            keyboard = [[InlineKeyboardButton("тЬЕ рдореИрдВрдиреЗ Join рдХрд░ рд▓рд┐рдпрд╛", callback_data="check_join")]]
            await update.message.reply_text(
                f"ЁЯЪи рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ рдЧреНрд░реБрдк рдХреЛ Join рдХрд░реЗрдВ:\nЁЯСЙ https://t.me/{REQUIRED_CHANNEL}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except Exception as e:
        keyboard = [[InlineKeyboardButton("тЬЕ рдореИрдВрдиреЗ Join рдХрд░ рд▓рд┐рдпрд╛", callback_data="check_join")]]
        await update.message.reply_text(
            f"тЪая╕П рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ рдЧреНрд░реБрдк рдХреЛ Join рдХрд░реЗрдВ:\nЁЯСЙ https://t.me/{REQUIRED_CHANNEL}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# Callback: тЬЕ рдореИрдВрдиреЗ Join рдХрд░ рд▓рд┐рдпрд╛
async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    member = await context.bot.get_chat_member("@" + REQUIRED_CHANNEL, user.id)

    if member.status in ["member", "administrator", "creator"]:
        keyboard = [[InlineKeyboardButton("ЁЯМР WebApp рдЦреЛрд▓реЗрдВ", web_app=WebAppInfo(url=WEBAPP_URL))]]
        await query.message.reply_text(
            "тЬЕ Verification Successful!\nрдЕрдм WebApp рдЦреЛрд▓реЗрдВ ЁЯСЗ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.message.reply_text(
            f"тЭМ рдЖрдкрдиреЗ рдЕрднреА рддрдХ Join рдирд╣реАрдВ рдХрд┐рдпрд╛!\nЁЯСЙ рдкрд╣рд▓реЗ рдпрд╣рд╛рдБ Join рдХрд░реЗрдВ: https://t.me/{REQUIRED_CHANNEL}"
        )

    await query.answer()

# рд╕рд┐рд░реНрдл Admin рдХреЗ рд▓рд┐рдП command
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("ЁЯСС Admin Panel рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!")
    else:
        await update.message.reply_text("тЭМ рдХреЗрд╡рд▓ Admin рдЗрд╕ command рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")

# ЁЯЪА Run Bot
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(check_join, pattern="check_join"))

    print("ЁЯдЦ Bot Started...")
    app.run_polling()

if __name__ == "__main__":
    main()
